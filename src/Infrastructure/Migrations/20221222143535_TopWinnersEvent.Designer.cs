// <auto-generated />
using System;
using CleanArchitecture.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CleanArchitecture.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221222143535_TopWinnersEvent")]
    partial class TopWinnersEvent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ActiveUserLogging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserLoggingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserLoggingId");

                    b.ToTable("ActiveUserLogging");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Ban", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("To")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ConfirmEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ConfirmEmails");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("RoleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.EmployeeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LogType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LoggedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeLogs");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.EmployeeProfiles.EmployeeProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeProfiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EmployeeProfile");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.EmployeeRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmployeeRoles");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EntryPrice")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EventEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EventStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQuantityLimited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSponsored")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrganizerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizerProfileId")
                        .HasColumnType("uuid");

                    b.Property<int>("Regime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegistrationEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RegistrationStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TopWinners")
                        .HasColumnType("integer");

                    b.Property<int>("View")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("OrganizerProfileId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.EventApproved", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("EventApproved");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.EventModerator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EventId");

                    b.ToTable("EventModerators");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.EventOnReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("EventOnReviews");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.EventParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EventId")
                        .HasColumnType("text");

                    b.Property<string>("IsApproved")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("ConfirmationTimeEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ConfirmationTimeStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GroupStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LobbyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LobbyPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Map")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PaidSlots")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReserveConfirmationTimeEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReserveSlotsQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("SlotPrice")
                        .HasColumnType("integer");

                    b.Property<int>("SlotsQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("StageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.GroupModerator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupModerators");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReserve")
                        .HasColumnType("boolean");

                    b.Property<bool>("ParticipationConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("SlotId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.ParticipantsUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersParticipants");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.PlacementPrize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Prize")
                        .HasColumnType("integer");

                    b.Property<Guid>("PrizeObjId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PrizeObjId");

                    b.ToTable("PlacementPrizes");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.PlayerStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Kills")
                        .HasColumnType("integer");

                    b.Property<int>("Place")
                        .HasColumnType("integer");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerStats");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Prize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Pool")
                        .HasColumnType("integer");

                    b.Property<int>("PrizePerKill")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("Prizes");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Stage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StageStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("View")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.UsersEventParticipants", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersEventParticipants");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Winner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EventId")
                        .HasColumnType("text");

                    b.Property<string>("StageId")
                        .HasColumnType("text");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("StageId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Winner");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ExTeamUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("ExTeamUsers");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BackgroundNewsId")
                        .HasColumnType("uuid");

                    b.Property<string>("EventId")
                        .HasColumnType("text");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("NewsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizerProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundNewsId")
                        .IsUnique();

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("NewsId");

                    b.HasIndex("OrganizerProfileId")
                        .IsUnique();

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("NewsEditorProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("NewsEditorProfileId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discord")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PubgId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telegram")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Youtube")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.RestorePassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRestored")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RestorePasswords");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ShadowBan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("To")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShadowBans");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ShopItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("AmountUsersPurchased")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<string>("Specifications")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Tag")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("ShopItems");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ShopItemUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ShopItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ShopItemId");

                    b.HasIndex("UserId");

                    b.ToTable("ShopItemUsers");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("InvitationCodeLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ManagerInvitationCodeLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfMembers")
                        .HasColumnType("integer");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Teammate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("TeammateType")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teammates");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.TeamUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeammateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeammateId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamUsers");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Coins")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeletedById");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.UserLogging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RefreshToken")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogging");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.UserStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Kills")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserStatistics");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.EmployeeProfiles.NewsEditorProfile", b =>
                {
                    b.HasBaseType("CleanArchitecture.Domain.Entities.EmployeeProfiles.EmployeeProfile");

                    b.HasDiscriminator().HasValue("NewsEditorProfile");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.EmployeeProfiles.OrganizerProfile", b =>
                {
                    b.HasBaseType("CleanArchitecture.Domain.Entities.EmployeeProfiles.EmployeeProfile");

                    b.HasDiscriminator().HasValue("OrganizerProfile");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ActiveUserLogging", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithOne("ActiveUserLogging")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.ActiveUserLogging", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.UserLogging", "UserLogging")
                        .WithMany()
                        .HasForeignKey("UserLoggingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserLogging");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Ban", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Employee", "Employee")
                        .WithMany("Bans")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithOne("Ban")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.Ban", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ConfirmEmail", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Employee", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Employee", "CreatedBy")
                        .WithMany("CreatedEmployees")
                        .HasForeignKey("CreatedById");

                    b.HasOne("CleanArchitecture.Domain.Entities.Employee", "DeletedBy")
                        .WithMany("DeletedEmployees")
                        .HasForeignKey("DeletedById");

                    b.HasOne("CleanArchitecture.Domain.Entities.EmployeeRole", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.EmployeeLog", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Employee", "Employee")
                        .WithMany("Logs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.EmployeeProfiles.EmployeeProfile", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Employee", "Employee")
                        .WithOne("Profile")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.EmployeeProfiles.EmployeeProfile", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Event", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Employee", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.EmployeeProfiles.OrganizerProfile", null)
                        .WithMany("CreatedEvents")
                        .HasForeignKey("OrganizerProfileId");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.EventApproved", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Event", "Event")
                        .WithMany("Approved")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Team", "Team")
                        .WithMany("Approved")
                        .HasForeignKey("TeamId");

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany("Approved")
                        .HasForeignKey("UserId");

                    b.Navigation("Event");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.EventModerator", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Employee", "Employee")
                        .WithMany("EventModerators")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Event", "Event")
                        .WithMany("EventModerators")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.EventOnReview", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Event", "Event")
                        .WithMany("OnReviews")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Team", "Team")
                        .WithMany("OnReviews")
                        .HasForeignKey("TeamId");

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany("OnReviews")
                        .HasForeignKey("UserId");

                    b.Navigation("Event");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.EventParticipant", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId");

                    b.HasOne("CleanArchitecture.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Event");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Group", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Stage", "Stage")
                        .WithMany("Groups")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.GroupModerator", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Employee", "Employee")
                        .WithMany("GroupModerators")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Group", "Group")
                        .WithMany("GroupModerators")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Participant", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Group", "Group")
                        .WithMany("Participants")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Event");

                    b.Navigation("Group");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.ParticipantsUser", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Participant", "Participant")
                        .WithMany("ParticipantsUsers")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany("ParticipantsUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.PlacementPrize", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Prize", "PrizeObj")
                        .WithMany("PlacementPrizes")
                        .HasForeignKey("PrizeObjId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrizeObj");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.PlayerStats", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Group", "Group")
                        .WithMany("Results")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Prize", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Event", "Event")
                        .WithOne("Prize")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.Events.Prize", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Stage", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Event", "Event")
                        .WithMany("Stages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.UsersEventParticipants", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Events.EventParticipant", "Participant")
                        .WithMany("Users")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany("Matches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Winner", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Event", "Event")
                        .WithOne("Winner")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.Events.Winner", "EventId");

                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Stage", "Stage")
                        .WithMany("Winners")
                        .HasForeignKey("StageId");

                    b.HasOne("CleanArchitecture.Domain.Entities.Team", "Team")
                        .WithMany("EventWinners")
                        .HasForeignKey("TeamId");

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany("EventWinners")
                        .HasForeignKey("UserId");

                    b.Navigation("Event");

                    b.Navigation("Stage");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ExTeamUser", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany("ExTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.MediaFile", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.News", "BackgroundNews")
                        .WithOne("Background")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.MediaFile", "BackgroundNewsId");

                    b.HasOne("CleanArchitecture.Domain.Entities.Events.Event", "Event")
                        .WithOne("Picture")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.MediaFile", "EventId");

                    b.HasOne("CleanArchitecture.Domain.Entities.News", "News")
                        .WithMany("Pictures")
                        .HasForeignKey("NewsId");

                    b.HasOne("CleanArchitecture.Domain.Entities.EmployeeProfiles.OrganizerProfile", "OrganizerProfile")
                        .WithOne("Logo")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.MediaFile", "OrganizerProfileId");

                    b.HasOne("CleanArchitecture.Domain.Entities.Profile", "Profile")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.MediaFile", "ProfileId");

                    b.HasOne("CleanArchitecture.Domain.Entities.Team", "Team")
                        .WithOne("Logo")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.MediaFile", "TeamId");

                    b.Navigation("BackgroundNews");

                    b.Navigation("Event");

                    b.Navigation("News");

                    b.Navigation("OrganizerProfile");

                    b.Navigation("Profile");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.News", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Employee", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.EmployeeProfiles.NewsEditorProfile", null)
                        .WithMany("CreatedNews")
                        .HasForeignKey("NewsEditorProfileId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Profile", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.RestorePassword", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ShadowBan", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Employee", "Employee")
                        .WithMany("ShadowBans")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithOne("ShadowBan")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.ShadowBan", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ShopItem", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Employee", "CreatedBy")
                        .WithMany("CreatedShopItems")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ShopItemUser", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.ShopItem", "ShopItem")
                        .WithMany("UserPurchasedShopItems")
                        .HasForeignKey("ShopItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany("PurchasedShopItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShopItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Team", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.User", "Creator")
                        .WithMany("CreatedTeams")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Teammate", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.TeamUser", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Team", "Team")
                        .WithMany("TeamUsers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Teammate", "Teammate")
                        .WithMany()
                        .HasForeignKey("TeammateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany("TeamUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Teammate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.User", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Employee", "DeletedBy")
                        .WithMany("DeletedUsers")
                        .HasForeignKey("DeletedById");

                    b.Navigation("DeletedBy");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.UserLogging", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Employee", "Employee")
                        .WithMany("Loggings")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany("UserLogging")
                        .HasForeignKey("UserId");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.UserStatistic", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithOne("Statistic")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.UserStatistic", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("CreatedEmployees");

                    b.Navigation("CreatedShopItems");

                    b.Navigation("DeletedEmployees");

                    b.Navigation("DeletedUsers");

                    b.Navigation("EventModerators");

                    b.Navigation("GroupModerators");

                    b.Navigation("Loggings");

                    b.Navigation("Logs");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("ShadowBans");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.EmployeeRole", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Event", b =>
                {
                    b.Navigation("Approved");

                    b.Navigation("EventModerators");

                    b.Navigation("OnReviews");

                    b.Navigation("Participants");

                    b.Navigation("Picture");

                    b.Navigation("Prize")
                        .IsRequired();

                    b.Navigation("Stages");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.EventParticipant", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Group", b =>
                {
                    b.Navigation("GroupModerators");

                    b.Navigation("Participants");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Participant", b =>
                {
                    b.Navigation("ParticipantsUsers");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Prize", b =>
                {
                    b.Navigation("PlacementPrizes");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Events.Stage", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Winners");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.News", b =>
                {
                    b.Navigation("Background");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Profile", b =>
                {
                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ShopItem", b =>
                {
                    b.Navigation("UserPurchasedShopItems");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Team", b =>
                {
                    b.Navigation("Approved");

                    b.Navigation("EventWinners");

                    b.Navigation("Logo")
                        .IsRequired();

                    b.Navigation("OnReviews");

                    b.Navigation("TeamUsers");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.User", b =>
                {
                    b.Navigation("ActiveUserLogging")
                        .IsRequired();

                    b.Navigation("Approved");

                    b.Navigation("Ban")
                        .IsRequired();

                    b.Navigation("CreatedTeams");

                    b.Navigation("EventWinners");

                    b.Navigation("ExTeams");

                    b.Navigation("Matches");

                    b.Navigation("OnReviews");

                    b.Navigation("ParticipantsUsers");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("PurchasedShopItems");

                    b.Navigation("ShadowBan")
                        .IsRequired();

                    b.Navigation("Statistic")
                        .IsRequired();

                    b.Navigation("TeamUsers");

                    b.Navigation("UserLogging");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.EmployeeProfiles.NewsEditorProfile", b =>
                {
                    b.Navigation("CreatedNews");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.EmployeeProfiles.OrganizerProfile", b =>
                {
                    b.Navigation("CreatedEvents");

                    b.Navigation("Logo");
                });
#pragma warning restore 612, 618
        }
    }
}
